import type { ClerkPaginationRequest } from '@clerk/types';
import type { PaginatedResourceResponse } from '../../../src/api/resources/Deserializer';
import type { WaitlistEntryStatus } from '../../../src/api/resources/Enums';
import type { WaitlistEntry } from '../../../src/api/resources/WaitlistEntry';
import { AbstractAPI } from '../../../src/api/endpoints/AbstractApi';
import type { WithSign } from '../../../src/api/endpoints/util-types';
type WaitlistEntryListParams = ClerkPaginationRequest<{
    /**
     * Filter waitlist entries by `email_address` or `id`
     */
    query?: string;
    status?: WaitlistEntryStatus;
    orderBy?: WithSign<'created_at' | 'invited_at' | 'email_address'>;
}>;
type WaitlistEntryCreateParams = {
    emailAddress: string;
    notify?: boolean;
};
export declare class WaitlistEntryAPI extends AbstractAPI {
    list(params?: WaitlistEntryListParams): Promise<PaginatedResourceResponse<WaitlistEntry>>;
    create(params: WaitlistEntryCreateParams): Promise<WaitlistEntry>;
}
export {};
//# sourceMappingURL=WaitlistEntryApi.d.ts.map